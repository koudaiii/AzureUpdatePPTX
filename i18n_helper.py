"""
Internationalization (i18n) helper module for Azure Update PPTX application.

This module provides language detection, translation management, and localization
support for multiple languages including Japanese, English, Korean, Chinese,
Thai, Vietnamese, Indonesian, and Hindi.
"""

import json
import os
from datetime import datetime
from typing import Dict, Any

import streamlit as st


# Supported languages configuration
LANGUAGES: Dict[str, str] = {
    "ja": "Êó•Êú¨Ë™û",
    "en": "English",
    "ko": "ÌïúÍµ≠Ïñ¥",
    "zh-cn": "‰∏≠Êñá(ÁÆÄ‰Ωì)",
    "zh-tw": "‰∏≠Êñá(ÁπÅÈ´î)",
    "th": "‡πÑ‡∏ó‡∏¢",
    "vi": "Ti·∫øng Vi·ªát",
    "id": "Bahasa Indonesia",
    "hi": "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä"
}


# Azure OpenAI system prompts for each language
SYSTEM_PROMPTS: Dict[str, str] = {
    "ja": (
        "Ê∏°„Åï„Çå„Åü„Éá„Éº„Çø„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„Çã Azure „ÅÆ„Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÊÉÖÂ†±„ÇíÊó•Êú¨Ë™û„Åß 3 Ë°åÁ®ãÂ∫¶„ÅßË¶ÅÁ¥Ñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
        "ÂêÑÊèê‰æõ„Åô„ÇãÂú∞Âüü„ÅÆ„É™„Éº„Ç∏„Éß„É≥„Å´„Å§„ÅÑ„Å¶„ÅØ„ÄÅÁøªË®≥„Åõ„Åö„Å´Ëã±Ë™ûË°®Ë®ò„ÅÆ„Åæ„Åæ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
        "„É™„É≥„ÇØÁî®„ÅÆURL„ÇÑ„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„ÅØÂê´„Åæ„Åö„ÄÅ„Éó„É¨„Éº„É≥„ÉÜ„Ç≠„Çπ„Éà„ÅßÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
    ),
    "en": (
        "Please summarize the Azure update information contained in the provided data in about 3 lines in English."
        "For regions in each provided area, keep them in English notation without translation."
        "Output in plain text without including URLs for links or markdown."
    ),
    "ko": (
        "Ï†úÍ≥µÎêú Îç∞Ïù¥ÌÑ∞Ïóê Ìè¨Ìï®Îêú Azure ÏóÖÎç∞Ïù¥Ìä∏ Ï†ïÎ≥¥Î•º ÌïúÍµ≠Ïñ¥Î°ú 3Ï§Ñ Ï†ïÎèÑÎ°ú ÏöîÏïΩÌï¥ Ï£ºÏÑ∏Ïöî."
        "Í∞Å Ï†úÍ≥µ ÏßÄÏó≠Ïùò Î¶¨Ï†ÑÏóê ÎåÄÌï¥ÏÑúÎäî Î≤àÏó≠ÌïòÏßÄ ÎßêÍ≥† ÏòÅÏñ¥ ÌëúÍ∏∞ Í∑∏ÎåÄÎ°ú ÎëêÏÑ∏Ïöî."
        "ÎßÅÌÅ¨Ïö© URLÏù¥ÎÇò ÎßàÌÅ¨Îã§Ïö¥ÏùÄ Ìè¨Ìï®ÌïòÏßÄ ÎßêÍ≥† ÏùºÎ∞ò ÌÖçÏä§Ìä∏Î°ú Ï∂úÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî."
    ),
    "zh-cn": (
        "ËØ∑Áî®‰∏≠Êñá(ÁÆÄ‰Ωì)Â∞ÜÊèê‰æõÊï∞ÊçÆ‰∏≠ÂåÖÂê´ÁöÑ Azure Êõ¥Êñ∞‰ø°ÊÅØÁî®Â§ßÁ∫¶ 3 Ë°åÊÄªÁªì„ÄÇ"
        "ÂØπ‰∫éÂêÑÊèê‰æõÂú∞Âå∫ÁöÑÂå∫ÂüüÔºåËØ∑‰∏çË¶ÅÁøªËØëÔºå‰øùÊåÅËã±ÊñáË°®Á§∫„ÄÇ"
        "‰∏çË¶ÅÂåÖÂê´ÈìæÊé•Áî®ÁöÑURLÊàñmarkdownÔºåËØ∑Áî®Á∫ØÊñáÊú¨ËæìÂá∫„ÄÇ"
    ),
    "zh-tw": (
        "Ë´ãÁî®‰∏≠Êñá(ÁπÅÈ´î)Â∞áÊèê‰æõÊï∏Êìö‰∏≠ÂåÖÂê´ÁöÑ Azure Êõ¥Êñ∞Ë≥áË®äÁî®Â§ßÁ¥Ñ 3 Ë°åÁ∏ΩÁµê„ÄÇ"
        "Â∞çÊñºÂêÑÊèê‰æõÂú∞ÂçÄÁöÑÂçÄÂüüÔºåË´ã‰∏çË¶ÅÁøªË≠ØÔºå‰øùÊåÅËã±ÊñáË°®Á§∫„ÄÇ"
        "‰∏çË¶ÅÂåÖÂê´ÈÄ£ÁµêÁî®ÁöÑURLÊàñmarkdownÔºåË´ãÁî®Á¥îÊñáÂ≠óËº∏Âá∫„ÄÇ"
    ),
    "th": (
        "‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Azure ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î"
        "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡πÇ‡∏õ‡∏£‡∏î‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©"
        "‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏™‡πà URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏£‡∏∑‡∏≠ markdown ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤"
    ),
    "vi": (
        "Vui l√≤ng t√≥m t·∫Øt th√¥ng tin c·∫≠p nh·∫≠t Azure c√≥ trong d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p b·∫±ng ti·∫øng Vi·ªát trong kho·∫£ng 3 d√≤ng."
        "ƒê·ªëi v·ªõi c√°c khu v·ª±c trong t·ª´ng khu v·ª±c ƒë∆∞·ª£c cung c·∫•p, vui l√≤ng kh√¥ng d·ªãch v√† gi·ªØ nguy√™n k√Ω hi·ªáu ti·∫øng Anh."
        "Kh√¥ng bao g·ªìm URL cho li√™n k·∫øt ho·∫∑c markdown v√† xu·∫•t ra d∆∞·ªõi d·∫°ng vƒÉn b·∫£n thu·∫ßn t√∫y."
    ),
    "id": (
        "Harap meringkas informasi pembaruan Azure yang terdapat dalam data yang diberikan "
        "dalam bahasa Indonesia sekitar 3 baris."
        "Untuk wilayah di setiap area yang disediakan, jangan diterjemahkan dan tetap gunakan notasi bahasa Inggris."
        "Jangan menyertakan URL untuk tautan atau markdown dan output dalam teks biasa."
    ),
    "hi": (
        "‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§ø‡§è ‡§ó‡§è ‡§°‡•á‡§ü‡§æ ‡§Æ‡•á‡§Ç ‡§®‡§ø‡§π‡§ø‡§§ Azure ‡§Ö‡§™‡§°‡•á‡§ü ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•ã ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§≤‡§ó‡§≠‡§ó 3 ‡§™‡§Ç‡§ï‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§"
        "‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§ø‡§è ‡§ó‡§è ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ï‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶ ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§∏‡§Ç‡§ï‡•á‡§§‡§® ‡§ï‡•ã ‡§µ‡•à‡§∏‡§æ ‡§π‡•Ä ‡§∞‡§ñ‡•á‡§Ç‡•§"
        "‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è URL ‡§Ø‡§æ markdown ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∏‡§æ‡§¶‡•á ‡§™‡§æ‡§† ‡§Æ‡•á‡§Ç ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§"
    )
}


# Date format patterns for each language
DATE_FORMATS: Dict[str, str] = {
    "ja": "%YÂπ¥%mÊúà%dÊó•",
    "en": "%B %d, %Y",
    "ko": "%YÎÖÑ %mÏõî %dÏùº",
    "zh-cn": "%YÂπ¥%mÊúà%dÊó•",
    "zh-tw": "%YÂπ¥%mÊúà%dÊó•",
    "th": "%d %B %Y",
    "vi": "ng√†y %d th√°ng %m nƒÉm %Y",
    "id": "%d %B %Y",
    "hi": "%d %B %Y"
}


class I18nHelper:
    """
    Helper class for internationalization support.

    Provides methods for language detection, translation management,
    and localization of dates and system prompts.
    """

    def __init__(self):
        """Initialize the I18nHelper with translation data."""
        self.translations = self._load_translations()

    def _load_translations(self) -> Dict[str, Dict[str, str]]:
        """
        Load translation files from the locales directory.

        Returns:
            Dictionary containing translations for all supported languages.
            Falls back to minimal translations if loading fails.
        """
        translations_path = os.path.join(
            os.path.dirname(__file__), 'locales', 'translations.json'
        )

        try:
            with open(translations_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            st.error(f"Failed to load translation files: {e}")
            return {
                "ja": {"main_title": "Azure Updates Summary", "button_text": "„Éá„Éº„Çø„ÇíÂèñÂæó"},
                "en": {"main_title": "Azure Updates Summary", "button_text": "Get Data"}
            }

    def get_current_language(self) -> str:
        """
        Get the currently selected language.

        Returns:
            Current language code (e.g., 'ja', 'en').
        """
        if 'language' not in st.session_state:
            # Detect browser language on first access
            detected_lang = self._detect_browser_language()
            st.session_state.language = detected_lang
        return st.session_state['language']

    def set_language(self, language_code: str) -> None:
        """
        Set the current language.

        Args:
            language_code: Language code to set (must be in LANGUAGES).
        """
        if not isinstance(language_code, str) or language_code not in LANGUAGES:
            st.error(
                self.t("invalid_language_code", language_code=language_code)
            )
            st.session_state.language = 'en'
            return

        st.session_state.language = language_code

    def t(self, key: str, **kwargs: Any) -> str:
        """
        Get translated text for the given key.

        Args:
            key: Translation key to look up.
            **kwargs: Placeholder values for string formatting.

        Returns:
            Translated text with placeholders replaced, or error message if not found.
        """
        current_lang = self.get_current_language()

        # Try current language first
        if (current_lang in self.translations and
                key in self.translations[current_lang]):
            text = self.translations[current_lang][key]
            if kwargs:
                text = text.format(**kwargs)
            return text

        # Fallback to Japanese
        if 'ja' in self.translations and key in self.translations['ja']:
            text = self.translations['ja'][key]
            if kwargs:
                text = text.format(**kwargs)
            return text

        # Key not found
        return f"[Missing: {key}]"

    def get_system_prompt(self) -> str:
        """
        Get the Azure OpenAI system prompt for the current language.

        Returns:
            System prompt string in the current language.
        """
        current_lang = self.get_current_language()
        return SYSTEM_PROMPTS.get(current_lang, SYSTEM_PROMPTS['ja'])

    def format_date(self, date_obj: datetime) -> str:
        """
        Format a date object according to the current language's format.

        Args:
            date_obj: datetime object to format.

        Returns:
            Formatted date string.
        """
        current_lang = self.get_current_language()
        date_format = DATE_FORMATS.get(current_lang, DATE_FORMATS['ja'])
        return date_obj.strftime(date_format)

    def language_selector(self) -> None:
        """
        Display the language selection widget in Streamlit.

        Handles browser language detection and user language selection.
        """
        self._process_language_query_param()
        current_lang = self.get_current_language()

        # Get index of current language
        lang_codes = list(LANGUAGES.keys())
        current_index = (
            lang_codes.index(current_lang)
            if current_lang in lang_codes else 0
        )

        # Display browser language detection info
        if 'language_auto_detected' not in st.session_state:
            st.session_state.language_auto_detected = True
            # Display only when non-default is detected
            if current_lang != 'en':
                lang_name = LANGUAGES.get(current_lang, current_lang)
                st.info(
                    f"üåê {lang_name} was selected based on system settings"
                )

        # Display select box with on_change callback
        def on_language_change():
            selected_lang = st.session_state.language_selector
            if selected_lang != st.session_state.get('language', 'en'):
                st.session_state.language = selected_lang

        st.selectbox(
            "Language / Ë®ÄË™û",
            options=lang_codes,
            format_func=lambda x: LANGUAGES[x],
            index=current_index,
            key="language_selector",
            on_change=on_language_change
        )

    def _detect_browser_language(self) -> str:
        """
        Detect the browser language.

        Returns:
            Detected language code, defaults to 'en' if detection fails.
        """
        # Get detected language from session state
        if 'detected_browser_language' in st.session_state:
            return st.session_state.detected_browser_language

        # Check if browser language was detected via JavaScript
        if 'browser_detected_lang' in st.session_state:
            detected = st.session_state.browser_detected_lang
            st.session_state.detected_browser_language = detected
            return detected

        # Default to English if no browser detection
        detected = 'en'
        st.session_state.detected_browser_language = detected
        return detected

    def _process_language_query_param(self) -> None:
        """
        Handle browser language detection via query parameters.

        Checks for browser_lang in query parameters and sets the language
        accordingly.
        """
        # Skip if already processed
        if 'browser_lang_processed' in st.session_state:
            return

        # Check for browser language in query parameters
        query_params = st.query_params
        if 'browser_lang' in query_params:
            browser_lang = query_params['browser_lang']
            if browser_lang in LANGUAGES:
                # Set the detected language in session state
                st.session_state.language = browser_lang
                st.session_state.browser_detected_lang = browser_lang
                st.session_state.detected_browser_language = browser_lang
                st.session_state.language_auto_detected = True
                # Mark as processed and clear parameter
                st.session_state.browser_lang_processed = True
                st.query_params.clear()
            else:
                # Clear invalid parameter
                st.query_params.clear()
                st.session_state.browser_lang_processed = True
        else:
            st.session_state.browser_lang_processed = True


# Global instance for easy access
i18n = I18nHelper()


def initialize_language_from_query_params() -> None:
    """
    Initialize language from query parameters before st.set_page_config.

    This function should be called at the very beginning of the main script
    to ensure language is set before any UI rendering.
    """
    query_params = st.query_params
    if 'browser_lang' in query_params:
        browser_lang = query_params['browser_lang']
        if browser_lang in LANGUAGES:
            # Initialize language in session state before any UI rendering
            st.session_state.language = browser_lang
            st.session_state.browser_detected_lang = browser_lang
            st.session_state.detected_browser_language = browser_lang
            st.session_state.language_auto_detected = True
